name: Build Custom Image

on:
  pull_request:
    types: [closed]
    branches: [main]

env: 
  PKR_VERSION: "1.8.5" 
  JAVA_VERSION: "19"   
  AWS_REGION: ${{ vars.AWS_REGION }}
  GCP_ZONE: ${{ vars.GCP_ZONE }}

jobs:
  # The job integration-tests runs on the latest Ubuntu environment
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    # Define the postgres service required for the job
    services:
      postgres:
        image: postgres:16
        # Environment variables for the Postgres database, fetched from GitHub Secrets
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        # Configure health required checks for the Postgres service
        options: >-
          --health-cmd="pg_isready -U $DB_USERNAME -d $DB_NAME"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout the repository to get the latest code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Java 19
      - name: Set Up Java v19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      # Step 3: Set environment variables required for database connection
      - name: Set Environment Variables
        run: |
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      # Step 4: Verify that the database is accessible
      - name: Verify Database Connection
        run: |
          sudo apt-get install -y postgresql-client
          PGPASSWORD=${{ env.DB_PASSWORD }} psql -h ${{ env.DB_HOST }} -U ${{ env.DB_USERNAME }} -d ${{ env.DB_NAME }} -c "SELECT 1;"

      # Step 5: Create the test schema if it does not exist
      - name: Create Schema if Not Exists
        run: |
          sudo apt-get install -y postgresql-client
          PGPASSWORD=${{ env.DB_PASSWORD }} psql -h ${{ env.DB_HOST }} -U ${{ env.DB_USERNAME }} -d ${{ env.DB_NAME }} -c "
          DO \$\$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_catalog.pg_namespace WHERE nspname = 'test') THEN
              CREATE SCHEMA test;
            END IF;
          END;
          \$\$
          "

      # Step 6: Build and run tests
      - name: Build and Zip Application
        run: |
          mvn clean package
          cd target
          zip -r webapp.zip webapp-0.0.1-SNAPSHOT.jar
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-zip
          path: target/webapp.zip    
       
  build-image:
    needs: integration-tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-zip
          path: target        
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure GCP credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{secrets.GCP_DEV_PROJECT_ID}}

      # - name: Set up Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v1    
      
      - name: Setup Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: ${{ env.PKR_VERSION }}

      - name: Initialize Packer Template
        run: |
          cd packer
          packer init .      
      
      - name: Build Image
        run: |
          cd packer
          packer build -color=false -on-error=abort \
            -var "aws_demo_account_id=${{ secrets.AWS_DEMO_ACCOUNT_ID }}" \
            -var "gcp_dev_project_id=${{ secrets.GCP_DEV_PROJECT_ID }}" \
            -var "gcp_demo_project_id=${{ secrets.GCP_DEMO_PROJECT_ID }}" \
            -var "db_name=${{ secrets.DB_NAME }}" \
            -var "db_username=${{ secrets.DB_USERNAME }}" \
            -var "db_password=${{ secrets.DB_PASSWORD }}" \
            -var "github_workspace=${{ github.workspace }}" \
            -var "aws_region=${{ env.AWS_REGION }}" \
            -var "gcp_zone=${{ env.GCP_ZONE }}" \
            webapp.pkr.hcl
        env:
          PACKER_LOG: 1

      - name: Share image with GCP DEMO project
        run: |
            IMAGE_NAME=$(gcloud compute images list --filter="name~'webapp-custom-image-*'" --format="value(name)" | head -n1)
            echo "Sharing image: $IMAGE_NAME"

            echo "${{ secrets.GCP_SA_KEY }}" > gcp-key.json
            gcloud auth activate-service-account --key-file=gcp-key.json

            gcloud compute images add-iam-policy-binding $IMAGE_NAME \
              --member=serviceAccount:${{ secrets.GCP_DEMO_PROJECT_EMAIL }} \
              --role=roles/compute.imageUser \
              --project=${{ secrets.GCP_DEMO_PROJECT_ID }}