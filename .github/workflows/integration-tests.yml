# Workflow for Integration tests
name: Integration Tests

# Trigger the workflow on pull requests to the main branch
on:
  pull_request:
    branches:
      - main 
    types: [opened, synchronize, reopened]  
      
jobs:
  # The job integration-tests runs on the latest Ubuntu environment
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest

    # Define the postgres service required for the job
    services:
      postgres:
        image: postgres:16
        # Environment variables for the Postgres database, fetched from GitHub Secrets
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        # Configure health required checks for the Postgres service
        options: >-
          --health-cmd="pg_isready -U $DB_USERNAME -d $DB_NAME"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout the repository to get the latest code
      - name: Checkout Repository
        uses: actions/checkout@v4

    #   # Step 2: Set up Java 19
    #   - name: Set Up Java v19
    #     uses: actions/setup-java@v3
    #     with:
    #       distribution: 'temurin'
    #       java-version: '19'
    #       cache: 'maven'

    #   # Step 3: Set environment variables required for database connection
    #   - name: Set Environment Variables
    #     run: |
    #       echo "DB_HOST=localhost" >> $GITHUB_ENV
    #       echo "DB_PORT=5432" >> $GITHUB_ENV
    #       echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
    #       echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
    #       echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

    #   # Step 4: Verify that the database is accessible
    #   - name: Verify Database Connection
    #     run: |
    #       sudo apt-get install -y postgresql-client
    #       PGPASSWORD=${{ env.DB_PASSWORD }} psql -h ${{ env.DB_HOST }} -U ${{ env.DB_USERNAME }} -d ${{ env.DB_NAME }} -c "SELECT 1;"

    #   # Step 5: Create the test schema if it does not exist
    #   - name: Create Schema if Not Exists
    #     run: |
    #       sudo apt-get install -y postgresql-client
    #       PGPASSWORD=${{ env.DB_PASSWORD }} psql -h ${{ env.DB_HOST }} -U ${{ env.DB_USERNAME }} -d ${{ env.DB_NAME }} -c "
    #       DO \$\$
    #       BEGIN
    #         IF NOT EXISTS (SELECT 1 FROM pg_catalog.pg_namespace WHERE nspname = 'test') THEN
    #           CREATE SCHEMA test;
    #         END IF;
    #       END;
    #       \$\$
    #       "

    #   # Step 6: Clear maven caches
    #   - name: Clear Maven Cache
    #     run: mvn dependency:purge-local-repository

    #   # Step 7: Build and run tests
    #   - name: Build and Run Tests
    #     run: mvn clean install